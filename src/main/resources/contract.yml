openapi: 3.0.3
info:
  title: Task Management System API
  description: |
    API REST reactiva para gestión colaborativa de tareas con capacidades en tiempo real.
    Soporta operaciones CRUD, streaming de eventos y notificaciones reactivas.
  version: 1.0.0
  contact:
    name: API Support
    email: api@taskmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.taskmanagement.com
    description: Production server

tags:
  - name: Tasks
    description: Operaciones relacionadas con tareas
  - name: Users
    description: Gestión de usuarios
  - name: Comments
    description: Comentarios en tareas
  - name: Events
    description: Eventos en tiempo real

paths:
  /api/tasks:
    get:
      tags:
        - Tasks
      summary: Obtener lista de tareas
      description: Retorna un stream de tareas con soporte para filtros y paginación reactiva
      operationId: getTasks
      parameters:
        - name: status
          in: query
          description: Filtrar por estado
          required: false
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - name: priority
          in: query
          description: Filtrar por prioridad
          required: false
          schema:
            $ref: '#/components/schemas/Priority'
        - name: assignedUserId
          in: query
          description: Filtrar por usuario asignado
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (0-indexed)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Tamaño de página
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: sort
          in: query
          description: Campo de ordenamiento
          required: false
          schema:
            type: string
            enum: [createdAt, dueDate, priority]
            default: createdAt
        - name: direction
          in: query
          description: Dirección de ordenamiento
          required: false
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
      responses:
        '200':
          description: Stream de tareas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
            application/x-ndjson:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Tasks
      summary: Crear nueva tarea
      description: Crea una nueva tarea y retorna la tarea creada
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
      responses:
        '201':
          description: Tarea creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Obtener tarea por ID
      description: Retorna una tarea específica
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID de la tarea
          schema:
            type: string
      responses:
        '200':
          description: Tarea encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Tasks
      summary: Actualizar tarea
      description: Actualiza una tarea existente
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID de la tarea
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
      responses:
        '200':
          description: Tarea actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Tasks
      summary: Eliminar tarea
      description: Elimina una tarea existente
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID de la tarea
          schema:
            type: string
      responses:
        '204':
          description: Tarea eliminada exitosamente
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/stream:
    get:
      tags:
        - Tasks
        - Events
      summary: Stream de eventos de tareas
      description: Server-Sent Events para actualizaciones en tiempo real
      operationId: streamTasks
      parameters:
        - name: userId
          in: query
          description: Filtrar eventos por usuario
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Stream de eventos SSE
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/TaskEvent'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/user/{userId}:
    get:
      tags:
        - Tasks
      summary: Obtener tareas por usuario
      description: Retorna todas las tareas asignadas a un usuario específico
      operationId: getTasksByUser
      parameters:
        - name: userId
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
        - name: status
          in: query
          description: Filtrar por estado
          required: false
          schema:
            $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: Lista de tareas del usuario
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/{taskId}/status:
    patch:
      tags:
        - Tasks
      summary: Actualizar estado de tarea
      description: Actualiza solo el estado de una tarea
      operationId: updateTaskStatus
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID de la tarea
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusUpdate'
      responses:
        '200':
          description: Estado actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users:
    get:
      tags:
        - Users
      summary: Obtener lista de usuarios
      description: Retorna un stream de usuarios
      operationId: getUsers
      parameters:
        - name: role
          in: query
          description: Filtrar por rol
          required: false
          schema:
            $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Crear nuevo usuario
      description: Crea un nuevo usuario en el sistema
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflicto - Email ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{userId}:
    get:
      tags:
        - Users
      summary: Obtener usuario por ID
      description: Retorna un usuario específico
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/{taskId}/comments:
    get:
      tags:
        - Comments
      summary: Obtener comentarios de una tarea
      description: Retorna todos los comentarios de una tarea específica
      operationId: getTaskComments
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID de la tarea
          schema:
            type: string
      responses:
        '200':
          description: Lista de comentarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Comments
      summary: Agregar comentario a tarea
      description: Crea un nuevo comentario en una tarea
      operationId: addComment
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID de la tarea
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
      responses:
        '201':
          description: Comentario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/comments/{commentId}:
    delete:
      tags:
        - Comments
      summary: Eliminar comentario
      description: Elimina un comentario específico
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          description: ID del comentario
          schema:
            type: string
      responses:
        '204':
          description: Comentario eliminado exitosamente
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/health:
    get:
      tags:
        - Health
      summary: Health check
      description: Verifica el estado del servicio y sus dependencias
      operationId: healthCheck
      responses:
        '200':
          description: Servicio saludable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Servicio no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  schemas:
    Task:
      type: object
      required:
        - id
        - title
        - status
        - priority
        - createdAt
      properties:
        id:
          type: string
          description: ID único de la tarea
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          description: Título de la tarea
          minLength: 1
          maxLength: 200
          example: "Implementar autenticación JWT"
        description:
          type: string
          description: Descripción detallada de la tarea
          maxLength: 2000
          example: "Implementar sistema de autenticación usando JWT tokens con refresh token"
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
          example: "2024-01-16T14:45:00Z"
        dueDate:
          type: string
          format: date-time
          description: Fecha límite
          example: "2024-01-20T23:59:59Z"
        assignedUserId:
          type: string
          description: ID del usuario asignado
          example: "507f191e810c19729de860ea"
        assignedUser:
          $ref: '#/components/schemas/UserSummary'
        tags:
          type: array
          description: Etiquetas asociadas
          items:
            type: string
          example: ["backend", "security", "urgent"]
        estimatedHours:
          type: number
          format: float
          description: Horas estimadas para completar
          minimum: 0
          example: 8.5
        actualHours:
          type: number
          format: float
          description: Horas reales invertidas
          minimum: 0
          example: 10.0

    TaskCreateRequest:
      type: object
      required:
        - title
        - priority
      properties:
        title:
          type: string
          description: Título de la tarea
          minLength: 1
          maxLength: 200
          example: "Implementar autenticación JWT"
        description:
          type: string
          description: Descripción detallada
          maxLength: 2000
          example: "Implementar sistema de autenticación usando JWT tokens"
        priority:
          $ref: '#/components/schemas/Priority'
        dueDate:
          type: string
          format: date-time
          description: Fecha límite
          example: "2024-01-20T23:59:59Z"
        assignedUserId:
          type: string
          description: ID del usuario a asignar
          example: "507f191e810c19729de860ea"
        tags:
          type: array
          description: Etiquetas
          items:
            type: string
          example: ["backend", "security"]
        estimatedHours:
          type: number
          format: float
          description: Horas estimadas
          minimum: 0
          example: 8.5

    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
          description: Título de la tarea
          minLength: 1
          maxLength: 200
        description:
          type: string
          description: Descripción detallada
          maxLength: 2000
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        dueDate:
          type: string
          format: date-time
          description: Fecha límite
        assignedUserId:
          type: string
          description: ID del usuario asignado
        tags:
          type: array
          description: Etiquetas
          items:
            type: string
        estimatedHours:
          type: number
          format: float
          description: Horas estimadas
          minimum: 0
        actualHours:
          type: number
          format: float
          description: Horas reales
          minimum: 0

    TaskStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/TaskStatus'
        reason:
          type: string
          description: Razón del cambio de estado
          maxLength: 500
          example: "Completado después de revisión de código"

    TaskStatus:
      type: string
      description: Estado de la tarea
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED
        - ON_HOLD
      example: IN_PROGRESS

    Priority:
      type: string
      description: Prioridad de la tarea
      enum:
        - LOW
        - MEDIUM
        - HIGH
        - CRITICAL
      example: HIGH

    TaskPage:
      type: object
      required:
        - content
        - totalElements
        - totalPages
        - size
        - number
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        totalElements:
          type: integer
          format: int64
          description: Total de elementos
          example: 100
        totalPages:
          type: integer
          description: Total de páginas
          example: 5
        size:
          type: integer
          description: Tamaño de página
          example: 20
        number:
          type: integer
          description: Número de página actual
          example: 0
        first:
          type: boolean
          description: Es la primera página
          example: true
        last:
          type: boolean
          description: Es la última página
          example: false
        numberOfElements:
          type: integer
          description: Elementos en la página actual
          example: 20

    TaskEvent:
      type: object
      required:
        - eventType
        - taskId
        - timestamp
      properties:
        eventType:
          type: string
          enum:
            - CREATED
            - UPDATED
            - DELETED
            - STATUS_CHANGED
            - ASSIGNED
            - COMMENT_ADDED
          description: Tipo de evento
          example: STATUS_CHANGED
        taskId:
          type: string
          description: ID de la tarea afectada
          example: "507f1f77bcf86cd799439011"
        task:
          $ref: '#/components/schemas/Task'
        userId:
          type: string
          description: ID del usuario que generó el evento
          example: "507f191e810c19729de860ea"
        timestamp:
          type: string
          format: date-time
          description: Momento del evento
          example: "2024-01-15T10:30:00Z"
        metadata:
          type: object
          description: Metadatos adicionales del evento
          additionalProperties: true

    User:
      type: object
      required:
        - id
        - name
        - email
        - role
        - createdAt
      properties:
        id:
          type: string
          description: ID único del usuario
          example: "507f191e810c19729de860ea"
        name:
          type: string
          description: Nombre completo
          minLength: 1
          maxLength: 100
          example: "Juan Pérez"
        email:
          type: string
          format: email
          description: Correo electrónico
          example: "juan.perez@example.com"
        role:
          $ref: '#/components/schemas/UserRole'
        avatar:
          type: string
          format: uri
          description: URL del avatar
          example: "https://example.com/avatars/user123.jpg"
        department:
          type: string
          description: Departamento
          example: "Desarrollo"
        active:
          type: boolean
          description: Usuario activo
          default: true
          example: true
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
          example: "2024-01-01T00:00:00Z"
        lastLogin:
          type: string
          format: date-time
          description: Último inicio de sesión
          example: "2024-01-15T09:00:00Z"

    UserSummary:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          description: ID del usuario
          example: "507f191e810c19729de860ea"
        name:
          type: string
          description: Nombre del usuario
          example: "Juan Pérez"
        email:
          type: string
          format: email
          description: Email del usuario
          example: "juan.perez@example.com"
        avatar:
          type: string
          format: uri
          description: URL del avatar
          example: "https://example.com/avatars/user123.jpg"

    UserCreateRequest:
      type: object
      required:
        - name
        - email
        - role
      properties:
        name:
          type: string
          description: Nombre completo
          minLength: 1
          maxLength: 100
          example: "Juan Pérez"
        email:
          type: string
          format: email
          description: Correo electrónico
          example: "juan.perez@example.com"
        password:
          type: string
          format: password
          description: Contraseña
          minLength: 8
          maxLength: 100
          example: "SecurePass123!"
        role:
          $ref: '#/components/schemas/UserRole'
        department:
          type: string
          description: Departamento
          example: "Desarrollo"
        avatar:
          type: string
          format: uri
          description: URL del avatar
          example: "https://example.com/avatars/user123.jpg"

    UserRole:
      type: string
      description: Rol del usuario
      enum:
        - ADMIN
        - MANAGER
        - DEVELOPER
        - VIEWER
      example: DEVELOPER

    Comment:
      type: object
      required:
        - id
        - text
        - taskId
        - userId
        - createdAt
      properties:
        id:
          type: string
          description: ID único del comentario
          example: "507f1f77bcf86cd799439012"
        text:
          type: string
          description: Texto del comentario
          minLength: 1
          maxLength: 1000
          example: "He completado la implementación inicial"
        taskId:
          type: string
          description: ID de la tarea
          example: "507f1f77bcf86cd799439011"
        userId:
          type: string
          description: ID del usuario autor
          example: "507f191e810c19729de860ea"
        user:
          $ref: '#/components/schemas/UserSummary'
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
          example: "2024-01-15T11:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última edición
          example: "2024-01-15T11:35:00Z"
        edited:
          type: boolean
          description: Si el comentario fue editado
          default: false
          example: false

    CommentCreateRequest:
      type: object
      required:
        - text
        - userId
      properties:
        text:
          type: string
          description: Texto del comentario
          minLength: 1
          maxLength: 1000
          example: "He completado la implementación inicial"
        userId:
          type: string
          description: ID del usuario autor
          example: "507f191e810c19729de860ea"

    HealthStatus:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [UP, DOWN, DEGRADED]
          description: Estado del servicio
          example: UP
        timestamp:
          type: string
          format: date-time
          description: Timestamp del check
          example: "2024-01-15T10:30:00Z"
        components:
          type: object
          description: Estado de componentes
          properties:
            database:
              $ref: '#/components/schemas/ComponentHealth'
            redis:
              $ref: '#/components/schemas/ComponentHealth'
        version:
          type: string
          description: Versión de la aplicación
          example: "1.0.0"
        uptime:
          type: integer
          format: int64
          description: Tiempo activo en segundos
          example: 86400

    ComponentHealth:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [UP, DOWN, DEGRADED]
          description: Estado del componente
          example: UP
        responseTime:
          type: integer
          description: Tiempo de respuesta en ms
          example: 15
        details:
          type: object
          description: Detalles adicionales
          additionalProperties: true

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
        - path
      properties:
        error:
          type: string
          description: Tipo de error
          example: "Bad Request"
        message:
          type: string
          description: Mensaje descriptivo del error
          example: "El campo 'title' es requerido"
        timestamp:
          type: string
          format: date-time
          description: Momento del error
          example: "2024-01-15T10:30:00Z"
        path:
          type: string
          description: Path del endpoint
          example: "/api/tasks"
        validationErrors:
          type: array
          description: Errores de validación detallados
          items:
            $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: Campo con error
          example: "email"
        message:
          type: string
          description: Mensaje de error
          example: "Formato de email inválido"
        rejectedValue:
          description: Valor rechazado
          example: "not-an-email"

  responses:
    BadRequest:
      description: Solicitud incorrecta
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnprocessableEntity:
      description: Entidad no procesable - Errores de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token para autenticación

security:
  - BearerAuth: []